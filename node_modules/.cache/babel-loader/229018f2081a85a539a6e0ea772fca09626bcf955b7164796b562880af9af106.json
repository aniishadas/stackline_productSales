{"ast":null,"code":"var _jsxFileName = \"/Users/anishadas/Documents/VSCode/stackline_productSales/src/components/lineChart.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n// import { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, registerables } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(...registerables);\nconst ProductChart = () => {\n  _s();\n  const {\n    data,\n    error\n  } = useSelector(state => state.data);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Assuming 'data' is a single ProductData object\n  const groupedData = data.sales.reduce((acc, sale) => {\n    const date = new Date(sale.weekEnding);\n    const monthYear = `${date.toLocaleString('default', {\n      month: 'short'\n    })} ${date.getFullYear()}`;\n    if (!acc[monthYear]) {\n      acc[monthYear] = {\n        retailSales: 0,\n        wholesaleSales: 0,\n        count: 0\n      };\n    }\n    acc[monthYear].retailSales += sale.retailSales;\n    acc[monthYear].wholesaleSales += sale.wholesaleSales;\n    acc[monthYear].count += 1;\n    return acc;\n  }, {});\n\n  // Prepare the chart data\n  const chartData = {\n    labels: Object.keys(groupedData),\n    datasets: [{\n      label: 'Retail Sales',\n      data: Object.values(groupedData).map(item => item.retailSales / item.count),\n      fill: false,\n      backgroundColor: 'rgb(75, 192, 192)',\n      borderColor: 'rgba(75, 192, 192, 0.2)'\n    }, {\n      label: 'Wholesale Sales',\n      data: Object.values(groupedData).map(item => item.wholesaleSales / item.count),\n      fill: false,\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgba(255, 99, 132, 0.2)'\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'month',\n          displayFormats: {\n            month: 'MMM'\n          }\n        },\n        title: {\n          display: true,\n          text: 'Month'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Sales'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chartInnerDiv\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chartInnerDiv\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 900,\n        height: 400,\n        data: data.sales,\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"weekEnding\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"retailSales\",\n          stroke: \"#40a8ef\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"wholesaleSales\",\n          stroke: \"#3c4858\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductChart, \"EzcYAEf3B9rj55JUtG3bKNG2sSU=\", false, function () {\n  return [useSelector];\n});\n_c = ProductChart;\nexport default ProductChart;\nvar _c;\n$RefreshReg$(_c, \"ProductChart\");","map":{"version":3,"names":["React","useSelector","Chart","ChartJS","registerables","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","register","ProductChart","_s","data","error","state","children","fileName","_jsxFileName","lineNumber","columnNumber","groupedData","sales","reduce","acc","sale","date","Date","weekEnding","monthYear","toLocaleString","month","getFullYear","retailSales","wholesaleSales","count","chartData","labels","Object","keys","datasets","label","values","map","item","fill","backgroundColor","borderColor","options","scales","x","type","time","unit","displayFormats","title","display","text","y","className","width","height","dataKey","strokeDasharray","stroke","_c","$RefreshReg$"],"sources":["/Users/anishadas/Documents/VSCode/stackline_productSales/src/components/lineChart.tsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../reduxStore/store';\n// import { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, ChartOptions, registerables } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nChartJS.register(...registerables);\n\n\ninterface GroupedData {\n  [key: string]: {\n    retailSales: number;\n    wholesaleSales: number;\n    count: number;\n  };\n}\n\nconst ProductChart: React.FC = () => {\n  const { data, error } = useSelector((state: RootState) => state.data);\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!data) {\n    return <div>No data available</div>;\n  }\n\n  // Assuming 'data' is a single ProductData object\n  const groupedData = data.sales.reduce<GroupedData>((acc, sale) => {\n    const date = new Date(sale.weekEnding);\n    const monthYear = `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\n    if (!acc[monthYear]) {\n      acc[monthYear] = {\n        retailSales: 0,\n        wholesaleSales: 0,\n        count: 0,\n      };\n    }\n    acc[monthYear].retailSales += sale.retailSales;\n    acc[monthYear].wholesaleSales += sale.wholesaleSales;\n    acc[monthYear].count += 1;\n    return acc;\n  }, {});\n\n  // Prepare the chart data\n  const chartData = {\n    labels: Object.keys(groupedData),\n    datasets: [\n      {\n        label: 'Retail Sales',\n        data: Object.values(groupedData).map(item => item.retailSales / item.count),\n        fill: false,\n        backgroundColor: 'rgb(75, 192, 192)',\n        borderColor: 'rgba(75, 192, 192, 0.2)',\n      },\n      {\n        label: 'Wholesale Sales',\n        data: Object.values(groupedData).map(item => item.wholesaleSales / item.count),\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)',\n      },\n    ],\n  };\n  const options: ChartOptions<'line'> = {\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'month',\n          displayFormats: {\n            month: 'MMM',\n          }\n        },\n        title: {\n          display: true,\n          text: 'Month',\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Sales',\n        },\n      },\n    },\n  };\n\n  return (\n    <div className='chartInnerDiv'>\n      {/* <Line data={chartData} options={options} /> */}\n      <div className=\"chartInnerDiv\">\n      <LineChart width={900} height={400} data={data.sales}>\n        <XAxis dataKey=\"weekEnding\" />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"retailSales\" stroke=\"#40a8ef\" />\n        <Line type=\"monotone\" dataKey=\"wholesaleSales\" stroke=\"#3c4858\" />\n      </LineChart>\n    </div>\n    </div>\n    \n  );\n};\n\nexport default ProductChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}