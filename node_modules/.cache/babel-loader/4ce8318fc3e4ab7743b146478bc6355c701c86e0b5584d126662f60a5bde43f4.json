{"ast":null,"code":"var _jsxFileName = \"/Users/anishadas/Documents/VSCode/stackline_demo/stackline_project/src/components/lineChart.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = () => {\n  _s();\n  const {\n    data,\n    error\n  } = useSelector(state => state.data);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  const groupedSalesData = {};\n  data.sales.forEach(sale => {\n    const month = sale.weekEnding.split('-')[1]; // Extract month from weekEnding\n    if (!groupedSalesData[month]) {\n      groupedSalesData[month] = {\n        retailSales: [],\n        wholesaleSales: []\n      };\n    }\n    groupedSalesData[month].retailSales.push(sale.retailSales);\n    groupedSalesData[month].wholesaleSales.push(sale.wholesaleSales);\n  });\n\n  // Calculate average sales for each month\n  const months = Object.keys(groupedSalesData);\n  const averageRetailSales = months.map(month => groupedSalesData[month].retailSales.reduce((acc, curr) => acc + curr, 0) / groupedSalesData[month].retailSales.length);\n  const averageWholesaleSales = months.map(month => groupedSalesData[month].wholesaleSales.reduce((acc, curr) => acc + curr, 0) / groupedSalesData[month].wholesaleSales.length);\n\n  // Prepare data for chart\n  const chartData = {\n    labels: months.map(month => new Date(`2022-${month}-01`)),\n    // Convert month to date object\n    datasets: [{\n      label: 'Retail Sales',\n      data: averageRetailSales,\n      borderColor: 'rgba(255, 99, 132, 1)',\n      backgroundColor: 'rgba(255, 99, 132, 0.2)'\n    }, {\n      label: 'Wholesale Sales',\n      data: averageWholesaleSales,\n      borderColor: 'rgba(54, 162, 235, 1)',\n      backgroundColor: 'rgba(54, 162, 235, 0.2)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chartInnerDiv\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        scales: {\n          x: {\n            type: 'time'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(LineChart, \"EzcYAEf3B9rj55JUtG3bKNG2sSU=\", false, function () {\n  return [useSelector];\n});\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useSelector","Line","jsxDEV","_jsxDEV","LineChart","_s","data","error","state","children","fileName","_jsxFileName","lineNumber","columnNumber","groupedSalesData","sales","forEach","sale","month","weekEnding","split","retailSales","wholesaleSales","push","months","Object","keys","averageRetailSales","map","reduce","acc","curr","length","averageWholesaleSales","chartData","labels","Date","datasets","label","borderColor","backgroundColor","className","options","scales","x","type","_c","$RefreshReg$"],"sources":["/Users/anishadas/Documents/VSCode/stackline_demo/stackline_project/src/components/lineChart.tsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../reduxStore/store';\nimport { Line } from 'react-chartjs-2';\nimport { SaleData } from '../dataType/data';\n\nconst LineChart: React.FC = () => {\n  const { data, error } = useSelector((state: RootState) => state.data);\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!data) {\n    return <div>No data available</div>;\n  }\n\n  const groupedSalesData: { [month: string]: { retailSales: number[]; wholesaleSales: number[] } } = {};\n\n  data.sales.forEach((sale: SaleData) => {\n    const month = sale.weekEnding.split('-')[1]; // Extract month from weekEnding\n    if (!groupedSalesData[month]) {\n      groupedSalesData[month] = { retailSales: [], wholesaleSales: [] };\n    }\n    groupedSalesData[month].retailSales.push(sale.retailSales);\n    groupedSalesData[month].wholesaleSales.push(sale.wholesaleSales);\n  });\n\n  // Calculate average sales for each month\n  const months = Object.keys(groupedSalesData);\n  const averageRetailSales = months.map(month => groupedSalesData[month].retailSales.reduce((acc, curr) => acc + curr, 0) / groupedSalesData[month].retailSales.length);\n  const averageWholesaleSales = months.map(month => groupedSalesData[month].wholesaleSales.reduce((acc, curr) => acc + curr, 0) / groupedSalesData[month].wholesaleSales.length);\n\n  // Prepare data for chart\n  const chartData = {\n    labels: months.map(month => new Date(`2022-${month}-01`)), // Convert month to date object\n    datasets: [\n      {\n        label: 'Retail Sales',\n        data: averageRetailSales,\n        borderColor: 'rgba(255, 99, 132, 1)',\n        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n      },\n      {\n        label: 'Wholesale Sales',\n        data: averageWholesaleSales,\n        borderColor: 'rgba(54, 162, 235, 1)',\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n      },\n    ],\n  };\n\n  return (\n    <div className='chartInnerDiv'>\n      <Line data={chartData} options={{ scales: { x: { type: 'time' } } }} />\n    </div>\n  );\n};\n\nexport default LineChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}