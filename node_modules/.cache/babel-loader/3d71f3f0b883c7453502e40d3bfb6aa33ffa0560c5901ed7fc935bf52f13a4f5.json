{"ast":null,"code":"var _jsxFileName = \"/Users/anishadas/Documents/VSCode/stackline_demo/stackline_project/src/components/lineChart.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = () => {\n  _s();\n  const {\n    data,\n    error\n  } = useSelector(state => state.data);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Assuming 'data' is a single ProductData object\n  const groupedData = data.sales.reduce((acc, sale) => {\n    const date = new Date(sale.weekEnding);\n    const monthYear = `${date.toLocaleString('default', {\n      month: 'short'\n    })} ${date.getFullYear()}`;\n    if (!acc[monthYear]) {\n      acc[monthYear] = {\n        retailSales: 0,\n        wholesaleSales: 0,\n        count: 0\n      };\n    }\n    acc[monthYear].retailSales += sale.retailSales;\n    acc[monthYear].wholesaleSales += sale.wholesaleSales;\n    acc[monthYear].count += 1;\n    return acc;\n  }, {});\n\n  // Prepare the chart data\n  const chartData = {\n    labels: Object.keys(groupedData),\n    datasets: [{\n      label: 'Retail Sales',\n      data: Object.values(groupedData).map(item => item.retailSales / item.count),\n      fill: false,\n      backgroundColor: 'rgb(75, 192, 192)',\n      borderColor: 'rgba(75, 192, 192, 0.2)'\n    }, {\n      label: 'Wholesale Sales',\n      data: Object.values(groupedData).map(item => item.wholesaleSales / item.count),\n      fill: false,\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgba(255, 99, 132, 0.2)'\n    }]\n  };\n\n  // Specify the scale type as 'time' for the x-axis\n  const options = {\n    scales: {\n      x: {\n        type: 'time'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chartInnerDiv\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(LineChart, \"EzcYAEf3B9rj55JUtG3bKNG2sSU=\", false, function () {\n  return [useSelector];\n});\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useSelector","Line","jsxDEV","_jsxDEV","LineChart","_s","data","error","state","children","fileName","_jsxFileName","lineNumber","columnNumber","groupedData","sales","reduce","acc","sale","date","Date","weekEnding","monthYear","toLocaleString","month","getFullYear","retailSales","wholesaleSales","count","chartData","labels","Object","keys","datasets","label","values","map","item","fill","backgroundColor","borderColor","options","scales","x","type","className","_c","$RefreshReg$"],"sources":["/Users/anishadas/Documents/VSCode/stackline_demo/stackline_project/src/components/lineChart.tsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../reduxStore/store';\nimport { Line } from 'react-chartjs-2';\n\ninterface GroupedData {\n  [key: string]: {\n    retailSales: number;\n    wholesaleSales: number;\n    count: number;\n  };\n}\n\nconst LineChart: React.FC = () => {\n  const { data, error } = useSelector((state: RootState) => state.data);\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!data) {\n    return <div>No data available</div>;\n  }\n\n  // Assuming 'data' is a single ProductData object\n  const groupedData = data.sales.reduce<GroupedData>((acc, sale) => {\n    const date = new Date(sale.weekEnding);\n    const monthYear = `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\n    if (!acc[monthYear]) {\n      acc[monthYear] = {\n        retailSales: 0,\n        wholesaleSales: 0,\n        count: 0,\n      };\n    }\n    acc[monthYear].retailSales += sale.retailSales;\n    acc[monthYear].wholesaleSales += sale.wholesaleSales;\n    acc[monthYear].count += 1;\n    return acc;\n  }, {});\n\n  // Prepare the chart data\n  const chartData = {\n    labels: Object.keys(groupedData),\n    datasets: [\n      {\n        label: 'Retail Sales',\n        data: Object.values(groupedData).map(item => item.retailSales / item.count),\n        fill: false,\n        backgroundColor: 'rgb(75, 192, 192)',\n        borderColor: 'rgba(75, 192, 192, 0.2)',\n      },\n      {\n        label: 'Wholesale Sales',\n        data: Object.values(groupedData).map(item => item.wholesaleSales / item.count),\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)',\n      },\n    ],\n  };\n\n  // Specify the scale type as 'time' for the x-axis\n  const options = {\n    scales: {\n      x: {\n        type: 'time',\n      },\n    },\n  };\n\n  return (\n    <div className='chartInnerDiv'>\n      <Line data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default LineChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}