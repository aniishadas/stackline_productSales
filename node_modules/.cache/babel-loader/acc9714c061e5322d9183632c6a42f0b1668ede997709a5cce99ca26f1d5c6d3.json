{"ast":null,"code":"var _jsxFileName = \"/Users/anishadas/Documents/VSCode/stackline_productSales/src/components/lineChart.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductChart = () => {\n  _s();\n  const {\n    data,\n    error\n  } = useSelector(state => state.data);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Assuming 'data' is a single ProductData object\n  // const groupedData = data.sales.reduce<GroupedData>((acc, sale) => {\n  //   const date = new Date(sale.weekEnding);\n  //   const monthYear = `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\n  //   if (!acc[monthYear]) {\n  //     acc[monthYear] = {\n  //       retailSales: 0,\n  //       wholesaleSales: 0,\n  //       count: 0,\n  //     };\n  //   }\n  //   acc[monthYear].retailSales += sale.retailSales;\n  //   acc[monthYear].wholesaleSales += sale.wholesaleSales;\n  //   acc[monthYear].count += 1;\n  //   return acc;\n  // }, {});\n\n  // Prepare the chart data\n  // const chartData = {\n  //   labels: Object.keys(groupedData),\n  //   datasets: [\n  //     {\n  //       label: 'Retail Sales',\n  //       data: Object.values(groupedData).map(item => item.retailSales / item.count),\n  //       fill: false,\n  //       backgroundColor: 'rgb(75, 192, 192)',\n  //       borderColor: 'rgba(75, 192, 192, 0.2)',\n  //     },\n  //     {\n  //       label: 'Wholesale Sales',\n  //       data: Object.values(groupedData).map(item => item.wholesaleSales / item.count),\n  //       fill: false,\n  //       backgroundColor: 'rgb(255, 99, 132)',\n  //       borderColor: 'rgba(255, 99, 132, 0.2)',\n  //     },\n  //   ],\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chartInnerDiv\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chartInnerDiv\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 900,\n        height: 400,\n        data: data.sales,\n        children: [/*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"weekEnding\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"retailSales\",\n          stroke: \"#40a8ef\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"wholesaleSales\",\n          stroke: \"#3c4858\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductChart, \"EzcYAEf3B9rj55JUtG3bKNG2sSU=\", false, function () {\n  return [useSelector];\n});\n_c = ProductChart;\nexport default ProductChart;\nvar _c;\n$RefreshReg$(_c, \"ProductChart\");","map":{"version":3,"names":["React","useSelector","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","ProductChart","_s","data","error","state","children","fileName","_jsxFileName","lineNumber","columnNumber","className","width","height","sales","dataKey","strokeDasharray","type","stroke","_c","$RefreshReg$"],"sources":["/Users/anishadas/Documents/VSCode/stackline_productSales/src/components/lineChart.tsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../reduxStore/store';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n\ninterface GroupedData {\n  [key: string]: {\n    retailSales: number;\n    wholesaleSales: number;\n    count: number;\n  };\n}\n\nconst ProductChart: React.FC = () => {\n  const { data, error } = useSelector((state: RootState) => state.data);\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (!data) {\n    return <div>No data available</div>;\n  }\n\n  // Assuming 'data' is a single ProductData object\n  // const groupedData = data.sales.reduce<GroupedData>((acc, sale) => {\n  //   const date = new Date(sale.weekEnding);\n  //   const monthYear = `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\n  //   if (!acc[monthYear]) {\n  //     acc[monthYear] = {\n  //       retailSales: 0,\n  //       wholesaleSales: 0,\n  //       count: 0,\n  //     };\n  //   }\n  //   acc[monthYear].retailSales += sale.retailSales;\n  //   acc[monthYear].wholesaleSales += sale.wholesaleSales;\n  //   acc[monthYear].count += 1;\n  //   return acc;\n  // }, {});\n\n  // Prepare the chart data\n  // const chartData = {\n  //   labels: Object.keys(groupedData),\n  //   datasets: [\n  //     {\n  //       label: 'Retail Sales',\n  //       data: Object.values(groupedData).map(item => item.retailSales / item.count),\n  //       fill: false,\n  //       backgroundColor: 'rgb(75, 192, 192)',\n  //       borderColor: 'rgba(75, 192, 192, 0.2)',\n  //     },\n  //     {\n  //       label: 'Wholesale Sales',\n  //       data: Object.values(groupedData).map(item => item.wholesaleSales / item.count),\n  //       fill: false,\n  //       backgroundColor: 'rgb(255, 99, 132)',\n  //       borderColor: 'rgba(255, 99, 132, 0.2)',\n  //     },\n  //   ],\n  // };\n\n  return (\n    <div className='chartInnerDiv'>\n      <div className=\"chartInnerDiv\">\n      <LineChart width={900} height={400} data={data.sales}>\n        <XAxis dataKey=\"weekEnding\" />\n        <YAxis />\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"retailSales\" stroke=\"#40a8ef\" />\n        <Line type=\"monotone\" dataKey=\"wholesaleSales\" stroke=\"#3c4858\" />\n      </LineChart>\n    </div>\n    </div>\n    \n  );\n};\n\nexport default ProductChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}